---
title: "Download a species list and cross-reference with conservation status lists"
description: |
  Knowing what species have been observed in a local area is a regular task for ecosystem management. Here we show how to make a species list with {galah-python} and how to cross-reference this list with threatened and sensitive species lists. We then show how to visualise this information as a waffle chart using {pywaffle} & {matplotlib}.
author:
  - name: "Amanda Buyan"
  - name: "Dax Kellie"
date: "2024-02-12"
title-block-banner: "#B8573E"
toc: true
toc-location: left
toc-depth: 2
categories:
  - Eukaryota
  - Summaries
  - Python
image: waffle-chart.png
freeze: true
engine: knitr
jupyter: python3
editor_options: 
  chunk_output_type: console
---

```{r}
#| include: false
library(htmltools)
```

<!-- remove metadata section -->
<style>
  #title-block-header.quarto-title-block.default .quarto-title-meta {
      display: none;
  }
</style>



<!-- Author card -->

:::{.author-card}
:::{.author-card-text}

#### Author
[Amanda Buyan](https://labs.ala.org.au/people/Buyan_Amanda/index.html)  
[Dax Kellie](https://labs.ala.org.au/people/Kellie_Dax/index.html)  

#### Date
12 February 2024

:::

:::{.author-card-image}
```{r, out.width='120px', out.extra='style="clip-path: circle();"', echo=FALSE}
knitr::include_graphics("https://raw.githubusercontent.com/AtlasOfLivingAustralia/ala-labs/main/images/people/amanda.jpg")
```
:::

:::{.author-card-image}
```{r, out.width='120px', out.extra='style="clip-path: circle();"', echo=FALSE}
knitr::include_graphics("https://raw.githubusercontent.com/AtlasOfLivingAustralia/ala-labs/main/images/people/dax.jpg")
```
:::

:::

<!------------------------ Post starts here ------------------------>

Knowing what species inhabit an area is important for conservation and ecosystem management. In particular, it can help us find out how many known species are in a given area, whether each species is common or rare, and whether any species are threatened or endangered.

In this post, we will use the `galah-python`, `geopandas`, `matplotlib` and `pywaffle` packages to show you how to download a list of species within the Yass Valley in 2023, cross-reference this list with state-wide conservation status lists, and visualise the number of threatened and sensitive species in the region. 

# Download a list of species

There are two ways to narrow a download query to return information for a specific region:  

  * Using fields available in `galah-python` (downloaded from the ALA)
  * Using a shapefile
  
The method you choose depends on whether the region you wish to return species for is already within `galah-python`, or whether you require a list for a more specific area defined by a shapefile.

::: {.panel-tabset .nav-pills}

# Fields in galah

```{python}
#| echo: false
#| eval: true
import pandas as pd
pd.set_option('display.max_columns', None)
pd.set_option('expand_frame_repr', False)
```

## Search for fields in galah

To find which fields and layers exist within `galah-python` to help us narrow our query, we can use the `search_all()` function. Let's do a text search to find what fields contain information on "Local Government Areas".

```{python}
import galah
import geopandas as gpd
galah.search_all(fields="Local Government Areas")
```

The field `cl10923`[^1] appears to contain the most recent data (from 2018). We can preview what values are *within* the field `cl10923` using `show_values()`.

```{python}
galah.show_values(field="cl10923")
```

There are lots Local Government Areas! To check that Yass Valley is included, we can do another text search for values that match "YASS VALLEY".

[^1]: Each spatial layer has a two letter code, along with a number to identify it. The abbreviations are as follows:
  * `cl` = contextual layer (i.e. boundaries of LGAs, Indigenous Protected Areas, States/Territories etc.)  
  * `10923` = number associated with the spatial layer in the atlas

```{python}
galah.search_values(field="cl10923", value = "YASS VALLEY")
```

## Download data

Using the `field` and `category` above, we can now build our query. We can use `atlas_species()` to return a species list, and use the `filters` argument to narrow our query. To add the observation count for each species, add `counts=True`.

```{python}
species_yass = galah.atlas_species(
  filters=["cl10923=YASS VALLEY COUNCIL", "year=2023"],
  counts=True
)
species_yass
```

# External shapefile

## Download shapefile

To retrieve the spatial outline of Yass Valley, let's download the latest Local Government Areas data from the [Australian Bureau of Statistics Digital Boundary files page](https://www.abs.gov.au/statistics/standards/australian-statistical-geography-standard-asgs-edition-3/jul2021-jun2026/access-and-downloads/digital-boundary-files). Find "Local Government Areas - 2023 - Shapefile" and click "Download ZIP". Save the zip folder in your current directory and unzip it.

We'll use `read_file()` from `geopandas` to load our shapefile.

```{python}
#| eval: false
#| echo: true
LGAs_2023 = gpd.read_file("LGA_2023_AUST_GDA2020.shp")
LGAs_2023
```

```{python}
#| echo: false
#| eval: true
# Load LGA boundaries
## Note: For rendering, you can find this data in the Science & Decision Support team folder in Data/ala-labs
LGAs_2023 = gpd.read_file("../data/LGA_2023/LGA_2023_AUST_GDA2020.shp")
LGAs_2023
```

Now let's use `to_crs()` to set the Coordinate Reference System (CRS) of our shapefile to [EPSG](https://en.wikipedia.org/wiki/EPSG_Geodetic_Parameter_Dataset):4326 (the standard used in cartography and GPS, also known as [WGS84](https://en.wikipedia.org/wiki/World_Geodetic_System)) so that it matches the projection of our data from the ALA [^2]. 

[^2]: Check out [this post](https://labs.ala.org.au/posts/2023-12-18_beginners-guide-make-a-map/post.html#make-a-map) for a better explanation of what CRS is and how it affects maps.

```{python}
LGAs_2023 = LGAs_2023.to_crs(4326)
```

Next we can filter our shapefile to only Yass Valley. The column `LGA_NAME23` contains area names, and we can filter our `Dataframe` to only rows where `LGA_NAME23` is equal to `Yass Valley`. We are left with a single polygon shape of Yass Valley.

```{python}
yass_valley = LGAs_2023[LGAs_2023['LGA_NAME23'] == "Yass Valley"]
yass_valley["geometry"]
```

## Download data

Now that `yass_valley` contains our LGA shape, we can build our query. We can use `atlas_species()` to return a species list, passing our shape to the `polygon` argument of `atlas_species()` and specifying the year to `filters`. To add the observation count for each species, add `counts=True`.

```{python}
species_yass = galah.atlas_species(
  polygon=yass_valley["geometry"][127],
  filters="year=2023",
  counts=True
  )
species_yass
```
:::

# Cross-reference with threatened and sensitive species lists

Next we will compare our Yass valley species list with several state-wide conservation status lists of threatened and sensitive species. We can retrieve lists of threatened and sensitive species in one of two ways: <br>

  - Use the lists available in the Atlas of Living Australia<br>
  - Use your own list

Both use the same method of matching species names in our Yass Valley list to species names in official conservation status lists. However, there is a slightly different workflow between using `galah-python` and using an externally downloaded list. Choose from the options below to use either method.

::: {.panel-tabset .nav-pills}

# Using lists in the ALA

We can use `galah-python` to access lists that are available on the Atlas of Living Australia to compare to our Yass Valley species list. 

Yass Valley is within the state of New South Wales, so let's do a text search for "New South Wales" to see what state-specific lists are available.

```{python}
galah.search_all(lists="New South Wales")
```

Two lists are returned, and both appear relevant. With the help of some additional columns returned by `search_all()`—`listType`, `isAuthoritative` and `isThreatened`—we can learn more about which list suits our needs best. Although both lists are authoritative, only one list (`dr650`) contains threatened species whereas the other `dr487` contains sensitive species. 

```{python}
galah.search_all(lists="New South Wales")[["species_list_uid", "listType", "isAuthoritative", "isThreatened"]]
```

We can return only species in Yass Valley on the New South Wales Conservation Status List (`dr650`) by adding the list ID `species_list_uid=dr650` to `filters`. Our query returns 22 species.

```{python}
yass_threatened = galah.atlas_species(
  polygon=yass_valley["geometry"][127],
  filters=["year=2023", "species_list_uid=dr650"],
  counts=True
  )
yass_threatened
```

We can do the same using the New South Wales Sensitive Species (`dr487`). Our query returns 3 species.

```{python}
yass_sensitive = galah.atlas_species(
  polygon=yass_valley["geometry"][127],
  filters=["year=2023", "species_list_uid=dr487"],
  counts=True
  )
yass_sensitive
```

# Using external lists

We can use our own conservation status lists from an external source to compare to our Yass Valley species list. 

As an example, we are using the the New South Wales Conservation Status List and the New South Wales Sensitive Species List[^3].

{{< downloadthis ../data/example_TSL.csv label="Download Conservation Status List" icon=database-fill-down type=info class=data-button >}} {{< downloadthis ../data/example_SSL.csv label="Download Sensitive Species List" icon=database-fill-down type=info class=data-button >}}

[^3]: These are the same two lists that you can access in `galah-python`, available from the Atlas of Living Australia. Keep in mind that if you use an external list, data cleaning may be required before matching species names.

First, let's read in both lists and see what each list looks like.

```{python}
#| eval: false
#| echo: true
import pandas as pd
threatened_list = pd.read_csv("example_TSL.csv")
sensitive_list = pd.read_csv("example_SSL.csv")
```

```{python}
#| eval: true
#| echo: false
import pandas as pd
threatened_list = pd.read_csv("../data/example_TSL.csv")
sensitive_list = pd.read_csv("../data/example_SSL.csv")
```

We can use the `isin()` to return the names in `species_yass` that 
match names in `threatened_list`. We return 22 species.

```{python}
yass_threatened = species_yass[species_yass['Species Name'].isin(list(threatened_list['species name']))].reset_index(drop=True)
yass_threatened
```

We can do the same with `sensitive_list`, which returns 3 species.
```{python}
yass_sensitive =  species_yass[species_yass['Species Name'].isin(list(sensitive_list['species name']))].reset_index(drop=True)
yass_sensitive
```

:::

# Visualise species conservation status

One useful way to visualise the number of threatened and sensitive species in an area is using a waffle chart. Waffle charts are useful because they can show the total number of species (represented as individual square units) and proportions of different groups (represented by colours). 

For example, we can visualse the number and proportion of species with different conservation status, along with a taxonomic breakdown of threatened/sensitive species [^4].

[^4]: To create our colour palette, we used [David Nichol's website](https://davidmathlogic.com/colorblind/#%23EAEAD8-%231E88E5-%23F7E9C3-%2324DCBD-%2343006B) to help colours that are colour-blind friendly, [the ColorHexa website](https://www.colorhexa.com/43006b-to-eaead8) create a gradient between 2 colours, and [Coolors](https://coolors.co/) to adjust the colours & shades.

```{python}
#| code-fold: true
#| echo: true
#| eval: false

# add packages
import matplotlib 
import matplotlib.pyplot as plt
from pywaffle import Waffle 

# initialise figure
fig = plt.figure(figsize=(10,6))
fig.add_subplot(211) # Top Long Waffle Chart #211
fig.add_subplot(212) # Bottom Left Sensitive/Threatened # 223

# set the axes for separate plotting
ax1, ax2 = fig.axes

# # Modify existing axis and set aspect to equal
ax1.set_aspect(aspect="equal")
ax2.set_aspect(aspect="equal")

# make sure there are unique colours for each species
remaining_species = species_yass.shape[0] - (yass_sensitive.shape[0] + yass_threatened.shape[0])
all_species = [yass_sensitive.shape[0],yass_threatened.shape[0],remaining_species]

# add title over all plots
plt.suptitle("Species in Yass Valley in 2023",fontsize=20)

# add extra text
percentage = round(float(yass_sensitive.shape[0] + yass_threatened.shape[0]) / species_yass.shape[0], 4)*100
fig.text(0.56,0.44,"*1 square = 1 species",fontsize=12)
fig.text(0.56,0.22,"{}%".format(percentage),fontsize=56)
fig.text(0.56,0.18,"Threatened/Sensitive Species",fontsize=12)
fig.text(0.13,0.50,"Taxonomic Breakdown",fontsize=13)

# waffle chart
Waffle.make_waffle(
    ax=ax1,
    rows=15,
    values=all_species, 
    colors = ["#FFC547","#A12B58","#E1E1E1"],
    legend={
        'labels': ["Sensitive","Threatened","Remaining"],
        'loc': 'upper left',
        'bbox_to_anchor': (0.23, 1.2),
        'ncol': 3,
        'framealpha': 0,
        'fontsize': 10
    }
)

# separate into birds, mammals, reptiles, plants and other
birds = yass_sensitive[yass_sensitive["Class"] == "Aves"].shape[0] + yass_threatened[yass_threatened["Class"] == "Aves"].shape[0]
mammals = yass_sensitive[yass_sensitive["Class"] == "Mammalia"].shape[0] + yass_threatened[yass_threatened["Class"] == "Mammalia"].shape[0]
reptiles = yass_sensitive[yass_sensitive["Class"] == "Reptilia"].shape[0] + yass_threatened[yass_threatened["Class"] == "Reptilia"].shape[0]
plants = yass_sensitive[yass_sensitive["Kingdom"] == "Plantae"].shape[0] + yass_threatened[yass_threatened["Kingdom"] == "Plantae"].shape[0]
other = (yass_sensitive.shape[0] + yass_threatened.shape[0]) - (birds + mammals + reptiles + plants)

# get counts and add them to labels
group_count = [birds,mammals,reptiles,plants,other]

# make the labels with number of unique species in label
group_labels = ["Birds","Mammals","Reptiles","Plants","Other"]

# Make types breakdown waffle chart
Waffle.make_waffle(
    ax=ax2,
    rows=5,
    values=group_count, 
    colors = ["#68116A","#A72566","#CA3F51","#DE9568","#F2D0A6"],
    legend={
        'labels': group_labels,
        'loc': 'upper right',
        'bbox_to_anchor': (1.7, 1.02),
        'ncol': 1,
        'framealpha': 0,
        'fontsize': 10
    }
)
```

```{python}
#| column: page
#| fig-align: center
#| out-width: 9in
#| echo: false
#| eval: true
#| warning: false
#| message: false
#| out-extra: "style=margin-left:auto;margin-right:auto;"
#| lightbox: 
#|   group: final-plot


# add packages
import matplotlib 
import matplotlib.pyplot as plt
from pywaffle import Waffle 

# initialise figure
fig = plt.figure(figsize=(10,6))
fig.add_subplot(211) # Top Long Waffle Chart #211
fig.add_subplot(212) # Bottom Left Sensitive/Threatened # 223

# set the axes for separate plotting
ax1, ax2 = fig.axes

# # Modify existing axis and set aspect to equal
ax1.set_aspect(aspect="equal")
ax2.set_aspect(aspect="equal")

# make sure there are unique colours for each species
remaining_species = species_yass.shape[0] - (yass_sensitive.shape[0] + yass_threatened.shape[0])
all_species = [yass_sensitive.shape[0],yass_threatened.shape[0],remaining_species]

# add title over all plots
plt.suptitle("Species in Yass Valley in 2023",fontsize=20)

# add extra text
percentage = round(float(yass_sensitive.shape[0] + yass_threatened.shape[0]) / species_yass.shape[0], 4)*100
fig.text(0.56,0.44,"*1 square = 1 species",fontsize=12)
fig.text(0.56,0.22,"{}%".format(percentage),fontsize=56)
fig.text(0.56,0.18,"Threatened/Sensitive Species",fontsize=12)
fig.text(0.13,0.50,"Taxonomic Breakdown",fontsize=13)

# waffle chart
Waffle.make_waffle(
    ax=ax1,
    rows=15,
    values=all_species, 
    colors = ["#FFC547","#A12B58","#E1E1E1"],
    legend={
        'labels': ["Sensitive","Threatened","Remaining"],
        'loc': 'upper left',
        'bbox_to_anchor': (0.23, 1.2),
        'ncol': 3,
        'framealpha': 0,
        'fontsize': 10
    }
)

# separate into birds, mammals, reptiles, plants and other
birds = yass_sensitive[yass_sensitive["Class"] == "Aves"].shape[0] + yass_threatened[yass_threatened["Class"] == "Aves"].shape[0]
mammals = yass_sensitive[yass_sensitive["Class"] == "Mammalia"].shape[0] + yass_threatened[yass_threatened["Class"] == "Mammalia"].shape[0]
reptiles = yass_sensitive[yass_sensitive["Class"] == "Reptilia"].shape[0] + yass_threatened[yass_threatened["Class"] == "Reptilia"].shape[0]
plants = yass_sensitive[yass_sensitive["Kingdom"] == "Plantae"].shape[0] + yass_threatened[yass_threatened["Kingdom"] == "Plantae"].shape[0]
other = (yass_sensitive.shape[0] + yass_threatened.shape[0]) - (birds + mammals + reptiles + plants)

# get counts and add them to labels
group_count = [birds,mammals,reptiles,plants,other]

# make the labels with number of unique species in label
group_labels = ["Birds","Mammals","Reptiles","Plants","Other"]

# Make types breakdown waffle chart
Waffle.make_waffle(
    ax=ax2,
    rows=5,
    values=group_count, 
    colors = ["#68116A","#A72566","#CA3F51","#DE9568","#F2D0A6"],
    legend={
        'labels': group_labels,
        'loc': 'upper right',
        'bbox_to_anchor': (1.7, 1.02),
        'ncol': 1,
        'framealpha': 0,
        'fontsize': 10
    }
)

plt.show()
```

# Final thoughts

We hope this post has helped you understand how to download a species list for a specific area and compare it to conservation lists. It's also possible to compare species with other information like lists of migratory species or seasonal species.

For other Python posts, check out [our beginner's guide to map species observations](https://labs.ala.org.au/posts/2023-12-18_beginners-guide-make-a-map/index.html) or see [how to map distributions of invasive species](https://labs.ala.org.au/posts/2023-04-28_plotting-invasive-species/post.html).

<details><summary style = "color: #E06E53;">Expand for session info</summary>

```{python}
#| echo: false
import math
import natsort
import pandas
import session_info

session_info.show()
```

</details>
