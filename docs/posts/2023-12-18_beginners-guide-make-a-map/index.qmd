---
title: "Beginner's guide: Make a quick map of species observations in Python and R"
description: |
  The ability to make a map quickly is an essential skill in ecology and conservation. This post shows how to make a quick, simple map of Peron's tree frog occurrences & set a custom font using either Python or R.
author:
  - name: "Amanda Buyan"
  - name: "Dax Kellie"
date: "2023-12-18"
title-block-banner: "#B8573E"
toc: true
toc-location: left
toc-depth: 2
categories:
  - Eukaryota
  - Animalia
  - Chordata
  - Anura
  - Maps
  - Python
  - R
image: map_tree-frog.png
freeze: true
engine: knitr
jupyter: python3
editor_options: 
  chunk_output_type: console
---

```{r}
#| include: false
library(htmltools)
```

<!-- remove metadata section -->
<style>
  #title-block-header.quarto-title-block.default .quarto-title-meta {
      display: none;
  }
</style>



<!-- Author card -->

:::{.author-card}
:::{.author-card-text}

#### Author
[Amanda Buyan](https://labs.ala.org.au/about/Buyan_Amanda/index.html)  
[Dax Kellie](https://labs.ala.org.au/about/Kellie_Dax/index.html)  

#### Date
18 December 2023

:::

:::{.author-card-image}
```{r, out.width='120px', out.extra='style="clip-path: circle();"', echo=FALSE}
knitr::include_graphics("https://raw.githubusercontent.com/AtlasOfLivingAustralia/ala-labs/main/images/people/amanda.jpg")
```
:::

:::{.author-card-image}
```{r, out.width='120px', out.extra='style="clip-path: circle();"', echo=FALSE}
knitr::include_graphics("https://raw.githubusercontent.com/AtlasOfLivingAustralia/ala-labs/main/images/people/dax.jpg")
```
:::

:::

<!------------------------ Post starts here ------------------------>

Maps are one of the most common and useful data visualisation tools in an ecologist's tool belt. Making a quick and simple map of species observations is especially useful when first investigating where a species has occurred. Viewing locations of points can also help to understand the extent of your data (and spot possible errors or outliers). 

In this post, we will use either Python or R to make a map of observations of Peron's tree frog (*Litoria peronii*) in New South Wales since 2018 recorded by FrogID.

::: {.panel-tabset .nav-pills}

# Python

## Download data

Peron's Tree frog is one of the most recorded frog species in the Atlas of Living Australia. Growing up to 7cm in length, it is well-known for its eyes which often look like they have a black cross on them!

::: {layout-ncol="3" style="margin-left: auto; margin-right: auto;"}
<img src="https://ala-images.s3.ap-southeast-2.amazonaws.com/store/8/e/f/0/b32e7003-0ab0-4d8d-95af-b8ea4e730fe8/original" class="rounded"/></img>

<img src="https://ala-images.s3.ap-southeast-2.amazonaws.com/store/2/6/4/2/201f6e7f-9a28-4acd-8ac8-f089f6fb2462/original" class="rounded"/></img>

<img src="https://ala-images.s3.ap-southeast-2.amazonaws.com/store/1/b/7/4/41d58826-abce-4647-8c25-335f145647b1/original" class="rounded"/></img>
:::

::: figure-caption
Left: [*Litoria peronii* (Giverny CC-BY-NC 4.0 (Int)](https://biocache.ala.org.au/occurrences/4d4a1b5d-f70f-4286-9282-3c325cdf2646), Middle: [*Litoria peronii* (debtaylor142 CC-BY-NC 4.0 (Int))](https://biocache.ala.org.au/occurrences/ed5f63f8-be87-41e0-9382-894c3fc45eda), Right: [*Litoria peronii* (Ernst Weiher, iNaturalist CC-BY-NC 4.0 (Int))](https://biocache.ala.org.au/occurrences/e0cd9d37-c994-40f3-95dd-d5da09b12b67)
:::

First, let's import `galah-python`.

```{python}
#| eval: true
#| message: false
#| warning: false
import galah
```


### Search for taxa

When trying to download data about any species or clade, we can search using `search_taxa()`. It's recommended to use `search_taxa()` to check whether a taxonomic search returns what you were expecting (even if you know the scientific name)! We can check taxonomic information about Peron's tree frog with `search_taxa()`, which returns extra details about the species when a match is found.

```{python}
#| eval: true
#| message: false
#| warning: false
galah.search_taxa("Litoria peronii")
```

### Search for fields

Next, we can search for fields and field IDs for filtering our query. In this case, we are interested in filtering to a specific year, state/territory and data resource. 

We can start by searching for any fields containing the word "year" using `search_all()`.

```{python}
#| eval: false
#| echo: true
#| warning: false
galah.search_all(
  fields="year"
  )
```

```{python}
#| eval: true
#| echo: false
#| warning: false
import pandas as pd
pd.set_option('display.max_columns', None)
pd.set_option('expand_frame_repr', False)
galah.search_all(fields="year")
```

We can do the same kind of search to find fields with information of australian states/territories and data resource names.

```{python}
#| eval: false
#| echo: true
#| warning: false
galah.search_all(
  fields="states"
  )
```

```{python}
#| eval: true
#| echo: false
#| warning: false
import pandas as pd
pd.set_option('display.max_columns', None)
pd.set_option('expand_frame_repr', False)
galah.search_all(fields="states")
```

```{python}
#| eval: false
#| echo: true
#| warning: false
galah.search_all(
  fields="dataresourcename"
  )
```

```{python}
#| eval: true
#| echo: false
#| warning: false
import pandas as pd
pd.set_option('display.max_columns', None)
pd.set_option('expand_frame_repr', False)
galah.search_all(
  fields="dataResource", 
  column_name="id"
  )
```

If you are ever uncertain which field ID to choose, you can use `show_values()` to see what possible values are *within* a field. For example, let's see what values are in field ID `cl22`.

```{python}
#| eval: false
#| echo: true
#| warning: false
galah.show_values(field="cl22")
```

```{python}
#| eval: true
#| echo: false
#| warning: false
import pandas as pd
pd.set_option('display.max_columns', None)
pd.set_option('expand_frame_repr', False)
galah.show_values(field="cl22")
```

We can also search for a value using `search_values()`, which might be handy to check that "FrogID" is a value in `dataResourceName`.

```{python}
#| eval: false
#| echo: true
#| warning: false
galah.search_values(field="dataResourceName", value="frogid")
```

```{python}
#| eval: true
#| echo: false
#| warning: false
import pandas as pd
pd.set_option('display.max_columns', None)
pd.set_option('expand_frame_repr', False)
galah.search_values(field="dataResourceName", value="frogid")
```

### Download observations

Now we are ready to build our query to download observations of Peron's tree frog in New South Wales since 2018 recorded by FrogID. 

For those unfamiliar with Australian geography, New South Wales is this one:

```{r}
#| echo: false
#| warning: false
#| message: false
library(ggplot2)
library(dplyr)

ggplot() + 
  geom_sf(data = ozmaps::ozmap_states, fill = "transparent") + 
  geom_sf(data = ozmaps::ozmap_states |>
    dplyr::filter(NAME == "New South Wales"), fill = "#E06E53") + 
    theme_void()
```

First, let's find the number of records that match our query. This is good practice before downloading occurrence records because you can check exactly how many records you are intending to download (and avoid an accidental massive download)! 

We'll use `atlas_counts()` to download record counts, specifying the taxon using the `taxa` argument, and narrowing the year range, state/territory and data resource using the `filters` argument.

```{python}
galah.atlas_counts(                      # *Download record counts*
    taxa="litoria peronii",              # *of Peron's tree frog*
    filters=["year>=2018",               # *since 2018*
             "cl22=New South Wales",     # *in New South Wales*
             "dataResourceName=FrogID"]  # *by FrogID*
)
```

Now we can use `atlas_occurrences()` to download occurrence records, which returns each observation's location coordinates and event date.

You will need to first provide a [registered email with the ALA](https://auth.ala.org.au/userdetails/registration/createAccount) using `galah_config()` before retrieving records.

```{python}
#| echo: false
#| eval: true
galah.galah_config(email = "amanda.buyan@csiro.au")
```

```{python}
#| echo: true
#| eval: false
galah.galah_config(email = "your-email-here")
frogs = galah.atlas_occurrences(
    taxa="litoria peronii",
    filters=["year>=2018",
             "cl22=New South Wales",
             "dataResourceName=FrogID"]
)
frogs
```

```{python}
#| echo: false
#| eval: true
import pandas as pd
pd.set_option('display.max_columns', None)
frogs = galah.atlas_occurrences(
    taxa="litoria peronii",
    filters=["year>=2018",
             "cl22=New South Wales",
             "dataResourceName=FrogID"]
)
frogs
```



## Make a map

It's time to make our map!  

In order to draw our map of New South Wales, we'll download a shapefile of the latest [state and territory boundaries from the Australian Bureau of statistics](https://www.abs.gov.au/statistics/standards/australian-statistical-geography-standard-asgs-edition-3/jul2021-jun2026/access-and-downloads/digital-boundary-files). Download the "States and Territories - 2021 - Shapefile" zip file, and save the zip file in the same folder you are coding in.

Let's load our States and Territories shapefile with `read_file()` and save it as `states`. Then, we will filter the shapefile to New South Wales and quickly plot it (specifying that the edges are black, the inside is white, and the figure size is 12 x 6 inches).

```{python}
#| echo: true
#| eval: false
from matplotlib import pyplot as plt
import geopandas as gpd

# Load Australian state and territory boundaries
states = gpd.read_file("STE_2021_AUST_GDA94.shp")

# Filter to New South Wales and plot
states[states["STE_NAME21"] == "New South Wales"].plot(edgecolor = "#5A5A5A", linewidth = 0.5, facecolor = "white", figsize = (12,6))
```

```{python}
#| echo: false
#| eval: true
from matplotlib import pyplot as plt
import geopandas as gpd

# Load Australian state and territory boundaries
## Note: For rendering, you can find this data in the Science & Decision Support team folder in Data/ala-labs
states = gpd.read_file("../data/Australia_state_boundaries/STE_2021_AUST_GDA94.shp")

# Filter to New South Wales
nsw = states[states["STE_NAME21"] == "New South Wales"]

# Plot
nsw.plot(edgecolor = "#5A5A5A", linewidth = 0.5, facecolor = "white", figsize = (12,6))
```

Our shapefile has plotted nicely, but there are many different ways to display our shape of NSW, which exists on a spherical globe (the Earth), onto a flat surface (our map). Our shapefile already has a projection, determined by its Coordinate Reference System (CRS) of GDA94.

```{python}
# see the details of our shape's CRS
nsw.crs
```

To make it clearer how the CRS changes the projection of a map, here are 3 maps of NSW projected with 3 different CRS: 

  *  GDA94 (the current projection of our NSW shapefile) 
  *  EPSG:8058 (a state/territory-specific projection for NSW)
  *  EPSG:2955 (intended for Canadian territories)

:::{layout-ncol=3 .column-body-outset}

```{python}
#| code-fold: true
#| fig-cap: 
#|   - "GDA94"
nsw.plot(edgecolor = "#5A5A5A", facecolor = "white")
```

```{python}
#| code-fold: true
#| fig-cap: 
#|   - "EPSG:8058"
nsw_gda2020 = nsw.to_crs(8058)
nsw_gda2020.plot(edgecolor = "#5A5A5A", facecolor = "white")
```

```{python}
#| code-fold: true
#| fig-cap: 
#|   - "EPSG:2955"
nsw_nad83 = nsw.to_crs(2955)
nsw_nad83.plot(edgecolor = "#5A5A5A", facecolor = "white")
```

:::

The CRS projection of ALA data is EPSG:4326 (also known as "WGS84"). Reprojecting the CRS of our shapefile allows us to make sure the points of our data align correctly with our shapefile.

```{python}
nsw = nsw.to_crs(4326)
```

Now, we will add species observations to our map. First, we will plot our reprojected shapefile. Then, we will overlay a scatter plot using `decimalLongitude` as your x axis and `decimalLatitude` as your y axis.  We'll set the colour (`c`) and adjust the `alpha` to make our points partially transparent.

```{python}
nsw.plot(edgecolor = "#5A5A5A", linewidth = 0.5, facecolor = "white", figsize = (12,6))
plt.scatter(frogs['decimalLongitude'],frogs['decimalLatitude'], c = "#6fab3f", alpha = 0.5)
```

For some final touches (to make the map prettier), we can add a title and remove the border.

We’ll add a custom Google font, [Roboto](https://fonts.google.com/specimen/Roboto), by downloading it from Google Fonts, saving the folder in your current directory, unzipping the folder, and loading it with the `matplotlib` library.  

```{python}
#| eval: false
#| echo: true
import matplotlib as mpl
from matplotlib import font_manager
font_files = font_manager.findSystemFonts(fontpaths="Roboto/")
for ff in font_files:
  font_manager.fontManager.addfont(ff)
```

```{python}
#| warning: false
#| message: false
#| eval: true
#| echo: false
import matplotlib as mpl
from matplotlib import font_manager
font_files = font_manager.findSystemFonts(fontpaths="../data/Roboto/")
for ff in font_files:
  font_manager.fontManager.addfont(ff)
```

For further information or troubleshooting tips for installing Roboto on your computer, [this post](https://python-graph-gallery.com/custom-fonts-in-matplotlib/) is an excellent guide, as well as the [matplotlib.font_manager documentation](https://matplotlib.org/stable/api/font_manager_api.html).

```{python}
#| eval: false
#| echo: true
#| warning: false
#| message: false
nsw.plot(edgecolor = "#5A5A5A", linewidth = 0.5, facecolor = "white", figsize = (12,6))
plt.scatter(frogs['decimalLongitude'],frogs['decimalLatitude'], c = "#6fab3f", alpha = 0.5, label = "Litoria peronii")
plt.suptitle("Peron's tree frog",fontsize=36,font='Roboto')
plt.title("FrogID observations in New South Wales since 2018",fontsize=28,font='Roboto')
plt.axis('off')
```

```{python}
#| column: screen-inset
#| fig-align: center
#| fig-height: 9
#| fig-width: 10
#| echo: false
#| eval: true
#| warning: false
#| message: false
#| out-extra: "style=margin-left:auto;margin-right:auto;"
plt.rcParams["font.family"] = "Roboto"
nsw.plot(edgecolor = "#5A5A5A", linewidth = 0.5, facecolor = "white", figsize = (24,12))
plt.scatter(frogs['decimalLongitude'],frogs['decimalLatitude'], c = "#6fab3f", alpha = 0.5, label = "Litoria peronii")
plt.suptitle("Peron's tree frog",fontsize=40) #,font='Roboto')
plt.title("FrogID observations in New South Wales since 2018",fontsize=30) #,font="Roboto")
plt.axis('off')
plt.show()
```

To save your plot in your current folder, you can use:

```{python}
#| eval: false
plt.savefig("perons_tree_frog_nsw.png")
```


## Final thoughts

We hope this post has helped make the basic steps of making a map simple and easy to understand. For more advanced mapping in Python, check out our ALA Labs article on [how to map invasive species](https://labs.ala.org.au/posts/2023-04-28_plotting-invasive-species/post.html).


<details><summary style = "color: #E06E53;">Expand for session info</summary>

```{python}
#| echo: false
import math
import natsort
import pandas
import session_info

session_info.show()
```

</details>



# R

## Download data

Peron's Tree frog is one of the most recorded frog species in the Atlas of Living Australia. Growing up to 7cm in length, it is well-known for its eyes which often look like they have a black cross on them!

::: {layout-ncol="3" style="margin-left: auto; margin-right: auto;"}
<img src="https://ala-images.s3.ap-southeast-2.amazonaws.com/store/8/e/f/0/b32e7003-0ab0-4d8d-95af-b8ea4e730fe8/original" class="rounded"/></img>

<img src="https://ala-images.s3.ap-southeast-2.amazonaws.com/store/2/6/4/2/201f6e7f-9a28-4acd-8ac8-f089f6fb2462/original" class="rounded"/></img>

<img src="https://ala-images.s3.ap-southeast-2.amazonaws.com/store/1/b/7/4/41d58826-abce-4647-8c25-335f145647b1/original" class="rounded"/></img>
:::

::: figure-caption
Left: [*Litoria peronii* (Giverny CC-BY-NC 4.0 (Int)](https://biocache.ala.org.au/occurrences/4d4a1b5d-f70f-4286-9282-3c325cdf2646), Middle: [*Litoria peronii* (debtaylor142 CC-BY-NC 4.0 (Int))](https://biocache.ala.org.au/occurrences/ed5f63f8-be87-41e0-9382-894c3fc45eda), Right: [*Litoria peronii* (Ernst Weiher, iNaturalist CC-BY-NC 4.0 (Int))](https://biocache.ala.org.au/occurrences/e0cd9d37-c994-40f3-95dd-d5da09b12b67)
:::

First, let's load some packages.

```{r}
#| message: false
#| warning: false
library(galah)
library(ggplot2)
library(dplyr)
library(sf)
library(here)
library(showtext)
```

```{r}
#| include: false
#| warning: false
#| message: false
rm(frogs)
```

### Search for taxa

When trying to download data about any species or clade, we can search using `search_taxa()`. It's recommended to use `search_taxa()` to check whether a taxonomic search returns what you were expecting (even if you know the scientific name)! We can check taxonomic information about Peron's tree frog with `search_taxa()`, which returns extra details about the species when a match is found.

```{r}
search_taxa("Litoria peronii")
```

### Search for fields

Next, we can search for fields and field IDs for filtering our query. In this case, we are interested in filtering to a specific year, state/territory and data resource. 

We can start by searching for any fields containing the word "year" using `search_all()`.

```{r}
search_all(fields, "year")
```

We can do the same kind of search to find fields with information of australian states/territories and data resource names.

```{r}
search_all(fields, "states")
search_all(fields, "resource")
```

If you are ever uncertain which field ID to choose, you can use `show_values()` to see what possible values are *within* a field. For example, let's see what values are in field ID `cl22`.

```{r}
search_all(fields, "cl22") |>
  show_values()
```

We can also search for a value using `search_values()`, which might be handy to check that "FrogID" is a value in `dataResourceName`.

```{r}
search_all(fields, "dataResourceName") |>
  search_values("FrogID")
```

### Download observations

Now we are ready to build our query to download observations of Peron's tree frog in New South Wales since 2018 recorded by FrogID. 

For those unfamiliar with Australian geography, New South Wales is this one:

```{r}
#| echo: false
#| warning: false
#| message: false
library(ggplot2)
library(dplyr)

ggplot() + 
  geom_sf(data = ozmaps::ozmap_states, fill = "transparent") + 
  geom_sf(data = ozmaps::ozmap_states |>
    dplyr::filter(NAME == "New South Wales"), fill = "#E06E53") + 
    theme_void()
```

First, let's find the number of records that match our query. This is good practice before downloading occurrence records because you can check exactly how many records you are intending to download (and avoid an accidental massive download)! 

We'll use `atlas_counts()` to download record counts, specifying the taxon using `galah_identify()`, and narrowing the year range, state/territory and data resource using `galah_filter()`.

```{r}
galah_call() |>                                 # Begin a query
  galah_identify("Litoria peronii") |>          # Peron's tree frog
  galah_filter(year >= 2018,                    # since 2018
               cl22 == "New South Wales",       # in New South Wales
               dataResourceName == "FrogID") |> # by FrogID
  atlas_counts()                                # Download record counts
```

Now we can use `atlas_occurrences()` to download occurrence records, which returns each observation's location coordinates and event date.

You will need to first provide a [registered email with the ALA](https://auth.ala.org.au/userdetails/registration/createAccount) using `galah_config()` before retrieving records.

```{r}
#| echo: false
#| eval: true
galah_config(email = "amanda.buyan@csiro.au", verbose = FALSE)
```

```{r}
#| echo: true
#| eval: false
galah_config(email = "your-email-here")
```

```{r}
#| warning: false
#| message: false
frogs <- galah_call() |>
  galah_identify("Litoria peronii") |>
  galah_filter(year >= 2018,
               cl22 == "New South Wales",
               dataResourceName == "FrogID") |>
  atlas_occurrences()
frogs
```

## Make a map

It's time to make our map!  

In order to draw our map of New South Wales, we'll download a shapefile of the latest [state and territory boundaries from the Australian Bureau of Statistics](https://www.abs.gov.au/statistics/standards/australian-statistical-geography-standard-asgs-edition-3/jul2021-jun2026/access-and-downloads/digital-boundary-files). Download the "States and Territories - 2021 - Shapefile" zip file, and save the zip file in the same folder you are coding in.

Let's load our States and Territories shapefile with `read_file()` and save it as `states`. Then, we will filter the shapefile to New South Wales and quickly plot it to check it plots correctly (specifying that the border is grey, and the inside is white).

```{r}
#| eval: false
#| echo: true
#| warning: false
#| message: false
# Load Australian state and territory boundaries
states <- st_read(here("STE_2021_AUST_GDA94.shp"),
                  quiet = TRUE)

# Filter to New South Wales
nsw <- states |> 
  filter(STE_NAME21 == "New South Wales")

# Plot
ggplot() +
  geom_sf(data = nsw,
          colour = "grey60",
          fill = "white")
```

```{r}
#| eval: true
#| echo: false
#| warning: false
#| message: false
# Load Australian state and territory boundaries
## Note: For rendering, you can find this data in the Science & Decision Support team folder in Data/ala-labs
states <- st_read(here("posts",
                       "data",
                       "Australia_state_boundaries",
                       "STE_2021_AUST_GDA94.shp"),
                  quiet = TRUE)

# Filter to New South Wales
nsw <- states |> 
  filter(STE_NAME21 == "New South Wales")

# Plot
ggplot() +
  geom_sf(data = nsw,
          colour = "grey60",
          fill = "white")
```

Our shapefile has plotted nicely, but there are many different ways to display our shape of NSW, which exists on a spherical globe (the Earth), onto a flat surface (our map). Our shapefile already has a projection, determined by its Coordinate Reference System (CRS) of GDA94.

```{r}
# see the details of our shape's geometry
nsw |> st_geometry()
```

To make it clearer how the CRS changes the projection of a map, here are 3 maps of NSW projected with 3 different CRS:  

  *  GDA94 (the current projection of our NSW shapefile) 
  *  EPSG:8058 (a state/territory-specific projection for NSW)
  *  EPSG:2955 (intended for Canadian territories)

```{r make-crs-maps}
#| code-fold: true

p1 <- nsw |> 
  ggplot() +
  geom_sf(colour = "grey60",
          fill = "white")

p2 <- nsw |> 
  st_transform(crs = st_crs(8058)) |>
  ggplot() +
  geom_sf(colour = "grey60",
          fill = "white")

p3 <- nsw |> 
  st_transform(crs = st_crs(2955)) |>
  ggplot() +
  geom_sf(colour = "grey60",
          fill = "white")
```

```{r print-crs-maps}
#| echo: false
#| layout-ncol: 3
#| fig-cap: 
#|   - "GDA94"
#|   - "EPSG:8058"
#|   - "EPSG:2955"
#| fig-column: body-outset
#| fig-align: center

p1
p2
p3
```

Data from the ALA use CRS EPSG:4326 (also known as "WGS84"). Reprojecting our shapefile to the same CRS allows us to make sure the points of our data align correctly with our shapefile.

```{r}
nsw <- nsw |>
  st_transform(crs = st_crs(4326))
```

Now, we will add species observations to our map. First, we will plot our reprojected shapefile. Then, we will overlay a scatter plot using `decimalLongitude` as your x axis and `decimalLatitude` as your y axis. We'll set the `colour` and adjust the `alpha` to make our points partially transparent.

```{r}
ggplot() +
  geom_sf(data = nsw,
          colour = "grey60",
          fill = "white") +
  geom_point(data = frogs,
             aes(x = decimalLongitude,
                 y = decimalLatitude),
             colour = "#6fab3f",
             alpha = 0.5,
             size = 1.1)
```

For some final touches (to make the map prettier), we can add a centred title and add a minimal theme.

We'll add a custom Google font, [Roboto](https://fonts.google.com/specimen/Roboto), using the showtext package, loading it into R with `font_add_google()`.

```{r}
#| fig-height: 8
#| fig-width: 9
#| warning: false
#| message: false
#| column: page
#| fig-align: center
#| out-extra: "style=margin-left:auto;margin-right:auto;"

# Add font
font_add_google("Roboto")
showtext_auto(enable = TRUE)

ggplot() +
  geom_sf(data = nsw,
          colour = "grey60",
          fill = "white") +
  geom_point(data = frogs,
             mapping = aes(x = decimalLongitude,
                           y = decimalLatitude),
             colour = "#6fab3f",
             alpha = 0.5,
             size = 1.1) +
  labs(title = "Peron's tree frog",
       subtitle = "FrogID observations in New South Wales since 2018") +
  theme_void() + 
  theme(
    plot.title = element_text(hjust = 0.5,          # horizontally centre
                              family = "Roboto",    # add font
                              size = 31),           # change font size
    plot.subtitle = element_text(hjust = 0.5,       # horizontally centre
                                 family = "Roboto", # add font
                                 size = 25)         # change font size
  )
```

To save your plot in your current folder, you can use:

```{r}
#| eval: false
# set dpi for text
showtext_opts(dpi = 320)

# save
ggsave(here("map_perons-tree-frog.png"),
       height = 9, width = 10,
       unit = "in",
       dpi = 320)
```

## Final thoughts

We hope this post has helped make the basic steps of making a map simple and easy to understand. For more advanced mapping in R, check out our ALA Labs articles on [exploring dingo observations](https://labs.ala.org.au/posts/2023-05-16_dingoes/post.html) and [how to make a choropleth map with multiple colour scales](https://labs.ala.org.au/posts/2022-05-23-ggnewscale/post.html).


<details><summary style = "color: #E06E53;">Expand for session info</summary>

```{r, echo = FALSE}
library(sessioninfo)
# save the session info as an object
pkg_sesh <- session_info(pkgs = "attached")
# print it out
pkg_sesh
```

</details>

:::
