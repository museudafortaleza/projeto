---
title: "Show seasonal species trends using a ridgeline plot"
description: | 
  Displaying ecological trends of many species or groups at once can sometimes appear messy or crowded. In this post we show how ridgeline plots are a useful way to show trends in seasonality by displaying observations of migratory bird species over the year using {ggridges}.
author:
  - name: "Olivia Torresan"
  - name: "Dax Kellie"
date: "2024-05-10"
title-block-banner: "#B8573E"
toc: true
toc-location: left
toc-depth: 2
categories:
  - Eukaryota
  - Animalia
  - Chordata
  - Aves
  - Summaries
  - R
image: shorebirds.png
draft: false
freeze: true
editor_options: 
  chunk_output_type: inline
---

```{r}
#| include: false
library(htmltools)
```

<!-- remove metadata section -->
<style>
  #title-block-header.quarto-title-block.default .quarto-title-meta {
      display: none;
  }
</style>


<!-- Author card -->

:::{.author-card}
:::{.author-card-text}

#### Author
[Olivia Torresan](https://labs.ala.org.au/about/Torresan_Olivia/)  
[Dax Kellie](https://labs.ala.org.au/about/Kellie_Dax/index.html)  

#### Date
10 May 2024

:::

:::{.row-b layout-ncol="3" style="margin-left: auto; margin-right: auto; margin-top: auto; margin-bottom: auto;"}

:::{.author-card-image style="width: auto; height: 120px; margin-right: auto !important;"}
<img src="https://raw.githubusercontent.com/AtlasOfLivingAustralia/ala-labs/main/images/people/olivia.jpg" style="object-fit: cover; border-radius: 50% !important; width: 140px;"></img>

:::

:::{.author-card-image style="width: auto; height: 120px; margin-right: auto;"}
<img src="https://raw.githubusercontent.com/AtlasOfLivingAustralia/ala-labs/main/images/people/dax.jpg" style="object-fit: cover; border-radius: 50% !important; width: 140px;"></img>

:::

:::
:::

<!------------------------ Post starts here ------------------------>


In ecology, it's common to investigate trends across individuals, populations, species or taxonomic groups. Although it's possible to use box plots and bar plots for this task, viewing many boxes or bars at once can become messy or crowded. These plots also display summary statistics which can sometimes mask important elements of variation in the data and potentially over-exaggerate existing trends. 

Ridgeline plots are one useful, fast type of visualisation for showing trends in ecological data like seasonality, diurnality and population growth or decline. They are especially useful for comparing a large number of individuals, species or groups because they display density curves rather than summary statistics. This means that variation in the data is visibly preserved.

Here, we use a ridgeline plot to quickly display the yearly seasonality of shorebirds (birds fond of tidal and estuary environments), in Pindanland, Western Australia using the [galah](https://galah.ala.org.au/R/), [ggplot2](https://ggplot2.tidyverse.org/) and [ggridges](https://wilkelab.org/ggridges/) packages. 

Let's start by loading the R packages that we will need. 

```{r}
#| warning: FALSE
library(galah)
library(tidyverse)
library(ggridges)
library(pilot) #remotes::install_github("olihawkins/pilot")
```

We will use the [galah package](https://galah.ala.org.au) to download occurrence records from the [Atlas of Living Australia (ALA)](https://www.ala.org.au). To do this, you'll need to provide a registered email address and pass it to galah using `galah_config()`. 

```{r}
#| include: false
galah_config(email = "dax.kellie@csiro.au", atlas = "Australia", verbose = FALSE)
```

```{r}
#| eval: FALSE
galah_config(email = "your-email@email.com")
```

## Download data 

Shorebirds are a group with many highly migratory birds that travel large distances between breeding seasons. One species found in Pindanland, the Bar-tailed Godwit (below left), migrates once a year across the Pacific to Australia for food; that's [11,000 kilometers non-stop](https://doi.org/10.1093/condor/107.1.1)![^longtrip] As a result shorebird abundance can fluctuate a lot in a given area depending on the time of year. Our goal is to display these changes in abundance by looking at how many total shorebird observations there have been on each day of the year, grouped by species. 

[^longtrip]: This is considered one of the longest continuous journeys by any bird in the world.

::: {layout-ncol="3" style="margin-left: auto; margin-right: auto;"}
<img src="https://ala-images.s3.ap-southeast-2.amazonaws.com/store/2/7/8/0/67245076-5f33-47e4-abe0-5f9e3e300872/original" class="rounded"/></img>

<img src="https://ala-images.s3.ap-southeast-2.amazonaws.com/store/f/0/a/4/aa67a84d-130a-4b16-aecc-4671496e4a0f/original" class="rounded"/></img>

<img src="https://ala-images.s3.ap-southeast-2.amazonaws.com/store/b/9/0/7/1e6c5521-9816-4786-97b5-d96eb56c709b/original" class="rounded"/></img>
:::

::: figure-caption
Left: [*Limosa lapponica* (lozwoz88 CC-BY-NC 4.0 (Int)](https://biocache.ala.org.au/occurrences/357e5646-58f4-4336-96ed-cb2adb81eec9), Middle: [*Stiltia isabella* (Steve Murray CC-BY-NC 4.0 (Int))](https://biocache.ala.org.au/occurrences/e7732077-891e-45b3-a284-9655ed53176e), Right: [*Cladorhynchus leucocephalus* (Blythe Nilson, iNaturalist CC-BY-NC 4.0 (Int))](https://biocache.ala.org.au/occurrences/93a48a21-5c56-4955-82a7-3738884daf1e)
:::

Let's download data of shorebirds in the order *Charadriiformes*. 

We are interested in downloading data from Pindanland, a subregion of the [IBRA](https://www.dcceew.gov.au/environment/land/nrs/science/ibra) bioregion Dampierland in Western Australia. To filter our data to only Pindanland, we'll do a text search for any fields in galah that contain IBRA information.

```{r}
search_all(fields, "ibra")
```

<aside>

For those unfamiliar with Australian geography, Pindanland is located here.


```{r}
#| echo: false
#| message: false
library(ozmaps)

# read in IBRA shapefile
ibra_shp <- sf::st_read(here::here("posts",
                         "data",
                         "IBRA7_subregions",
                         "ibra7_subregions.shp"),
                    quiet = TRUE) |>  
  sf::st_transform(crs = sf::st_crs("WGS84")) |>
  rmapshaper::ms_simplify(keep = 0.1)

Pindanland <- ibra_shp |>
  filter(SUB_NAME_7 == "Pindanland") |>
  sf::st_transform(crs = sf::st_crs("WGS84"))

# create the start and end points of the label arrow

arrows <- tibble(
  x1 = 119.813640,   # starting x-coordinate
  x2 = 121,          # ending x-coordinate
  y1 = -16,   # starting y-coordinate
  y2 = -18           # snding y-coordinate
)

ibra_highlightplot <-
  ggplot() +
  geom_sf(data = ibra_shp,
          fill = "transparent",
          colour = "grey90") +
  geom_sf(data = ozmap_country,
          fill = "transparent",
          colour = "grey40") +
  geom_sf(data = Pindanland, 
          fill = "#E06E53",
          colour = "#E06E53") +
  xlab("Longitude") +
  ylab("Latitude") +
  xlim(c(112, 156)) + # Set limits for x-axis
  ylim(c(-44, -10)) +
  geom_curve( # Set limits for y-axis
    data = arrows, 
    aes(x = x1, y = y1, xend = x2, yend = y2),
    arrow = arrow(length = unit(0.08, "inch")),
    linewidth = 1.5,
    color = "gray10",
    curvature = -0.3
  ) +
  annotate("text", x = 115, y = -16, label = "Pindanland", size = 5.2) +
  theme_void()

ibra_highlightplot
```

</aside>


The field ID `cl1049` appears to contain IBRA subregions. Let's show what values are recorded in the IBRA 7 Subregions field to check.


```{r}
search_all(fields, "cl1049") |> show_values()
```

We can also search for "Pindanland" to double check for our subregion.

```{r}
search_all(fields, "cl1049") |> 
  search_values("Pindanland")
```

Now we are able to download occurrence data of shorebirds in Pindanland by using field `cl1049` in our query. We'll further filter our query to return occurrences recorded after the year 2000, human observations (rather than museum specimens), and records identified to the species level. We'll also use a set of ALA data cleaning filters (i.e. a data *profile*) by adding `galah_apply_profile(ALA)` to return fewer erroneous records. To shrink the amount of data we return, we'll select only columns `eventDate`, `scientificName` to return. 

```{r}
#| message: false
#| warning: false
#| verbose: false
# download shorebird records
shorebirds <- galah_call() |>
  galah_identify("Charadriiformes") |> 
  galah_filter(cl1049 == "Pindanland",
               year > 2000,
               basisOfRecord == "HUMAN_OBSERVATION",
               taxonRank == "species") |>
  galah_apply_profile(ALA) |>
  galah_select(eventDate, scientificName) |>
  atlas_occurrences()
shorebirds
```

## Prepare data

Now that we have our data, we need to prepare it for our plot. Remember that we are trying to visualise total number of observations of each species each day of the year.

To clean our data, we'll remove records missing an `eventDate`. Then we can convert `eventDate` to a standard date class (yyyy/mm/dd), and extract the day of the year (Julian date)[^1]. 

[^1]: Thanks to leap years, our Julian dates wont be perfectly to the day, but good enough for a quick summary. 


```{r}
# format date
shorebirds_dates <- shorebirds |>
  drop_na(eventDate) |>
  mutate(
    eventDate = as_date(eventDate),
    date_julian = yday(eventDate)
  )

shorebirds_dates
```

We then filter our data to only include species with more than 10 occurrence records, which leaves us our final data frame ready for plotting. 

```{r}
shorebirds_filtered <- shorebirds_dates |>
  group_by(scientificName) |>
  filter(n_distinct(date_julian) >= 10)

shorebirds_filtered |> rmarkdown::paged_table()
```

## Make ridgeline plot

We can now create a simple ridgeline plot for our data using `geom_density_ridges()`.

```{r}
#| warning: false
#| fig-height: 6
#| fig-width: 10
#| column: body-outset
#| fig-align: center
#| out-extra: "style=margin-left:auto;margin-right:auto;"
ridge_plot <- ggplot(
  data = shorebirds_filtered,
  aes(x = date_julian,
      y = scientificName,
      fill = scientificName)) +  
  ggridges::geom_density_ridges(color = NA) +  
  theme_minimal() +
  theme(legend.position = "none")

ridge_plot

```

If we want to refine our plot, there are some extra things we can do to increase its readability. 

For example, we can make the trends easier to interpret by ordering species by a summary statistic (e.g., mean). We ordered by month with the highest proportion of observations[^order], which helps place birds with greater abundance at the end of the year towards the top, and birds with greater abundance at the beginning of the year at the bottom. We also adjusted the the smoothness of our ridges to see more fine-scale variation in our data. 

We can also adjust the colours and axis labels. We chose `theme_pilot` from the [pilot package](https://github.com/olihawkins/pilot) as it uses a colour-blind friendly palette.  

[^order]: Specifically, we multiplied the proportion of records by month number (e.g., January = 1, December = 12) so that birds with lots of records at the end of the year return a high number, whereas birds with lots of records at the beginning of the year return a low number.

```{r}
#| warning: false
#| code-fold: true
#| fig-height: 10
#| fig-width: 15
#| column: page
#| fig-align: center
#| fig-cap: "Total daily observations of shorebirds from 2000–2024 in Pindanland, WA"
#| out-extra: "style=margin-left:auto;margin-right:auto;"

# add month
shorebirds_filtered <- shorebirds_filtered |>
  mutate(
    month = month(eventDate, 
                  abbr = TRUE, 
                  label = TRUE),
    month_number = month(eventDate,
                         abbr = FALSE,
                         label = FALSE)
    )

# add month proportion column
shorebirds_filtered_prop <- shorebirds_filtered |>
  group_by(scientificName, month) |>
  summarise(n = n(), 
            .groups = "drop") |>
  group_by(scientificName) |>
  mutate(
    total = sum(n),
    prop = n/total * 100,
  ) |>
  left_join(shorebirds_filtered,
            join_by(scientificName == scientificName, 
                    month == month))

shorebirds_filtered_prop |>
  ggplot(
  aes(
    x = date_julian,
    y = fct_reorder(scientificName, prop*month_number),
    fill = fct_reorder(scientificName, prop*month_number), 
    colour = fct_reorder(scientificName, prop*month_number),
  )) +
  scale_x_continuous(
    breaks = c(1, 30, 60, 90, 120, 150, 
               180, 210, 240, 270, 300, 330),  # set numbers for labels
    labels = c("Jan", "Feb", "Mar", "Apr", "May", "June", 
               "July", "Aug", "Sept", "Oct", "Nov", "Dec"), # set labels
    expand = c(0,0)) + 
  labs(x = "Month") +
  ggridges::geom_density_ridges(color = NA,
    bandwidth = 9,       # smoothness of the curve
    scale = 6,            # ridge width
    height = 0.05,        # ridge height
    alpha = .8,           # transparency
    rel_min_height = 0.02) +
  pilot::theme_pilot(grid = "v",  # grid lines 
                     axes = "") + # axis lines
  pilot::scale_fill_pilot() +
  theme(legend.position = "none",
        axis.title.y = element_blank(),
        axis.title.x = element_text(size = 16),
        axis.text.x = element_text(size = 14))
```

Our plot shows that many birds arrive around September each year, and many species are observed most around November. We can also see that many species have a drop in observations from May to August (i.e., winter months).

## Final thoughts 

And that's it! Ridgeline plots are a simple and fast visualisation to use, and are a beautiful way to display ecological data.

Ridgeline plots do, however, have their limits. They don't give an indication of *how many* observations there are of each bird species, or how they compare to each other, so they are mainly useful for displaying broader trends.

Keep in mind that ridgeline plots might need adjusting to visualise your data clearly. Compare our first quick plot and our second refined plot above, for example. The smoother ridges in the first plot mask variation in our data, only made clearer with less smooth ridges in the second plot. Balancing the shape of your ridges will help improve the transparency of your data visualisation.

If you want to make other transparent summary visualisations, check out this post on [how to make beeswarm and raincloud plots](https://labs.ala.org.au/posts/2023-08-28_alternatives-to-box-plots/).


<details><summary style = "color: #E06E53;">Expand for session info</summary>

```{r, echo = FALSE}
#| warning: false
library(sessioninfo)
# save the session info as an object
pkg_sesh <- session_info(pkgs = "attached")
# print it out
pkg_sesh
```

</details>
