---
title: "Combining multiple species distributions on one map with hexagons and points"
description: |
  Visualising multiple species distributions in a single figure can be difficult if there are areas where ranges overlap. In this post we introduce a way to show several species distributions in an area at once using a novel twist on the commonly used hexbin map.
author:
  - name: "Callum Waite"
  - name: "Shandiya Balasubramaniam"
date: "2024-01-25"
title-block-banner: "#B8573E"
toc: true
toc-location: left
toc-depth: 3
categories:
  - Eukaryota
  - Animalia
  - Chordata
  - Aves
  - Maps
  - R
image: map_hexbin-points.png
draft: false
freeze: true
editor_options: 
  chunk_output_type: console
---

```{r}
#| include: false
library(htmltools)
```

<!-- remove metadata section -->

```{=html}
<style>
  #title-block-header.quarto-title-block.default .quarto-title-meta {
      display: none;
  }
</style>
```
<!-- Author card -->

::: author-card
::: author-card-text
#### Author

[Callum Waite](https://labs.ala.org.au/about/Waite_Callum/)\
[Shandiya Balasubramaniam](https://labs.ala.org.au/about/Balasubramaniam_Shandiya/)

#### Date

25 January 2024
:::

::: author-card-image
```{r, out.width='120px', out.extra='style="clip-path: circle();"', echo=FALSE, lightbox=FALSE}
knitr::include_graphics("https://raw.githubusercontent.com/AtlasOfLivingAustralia/ala-labs/main/images/people/callum.jpg")
```
:::

::: author-card-image
```{r, out.width='120px', out.extra='style="clip-path: circle();"', echo=FALSE, lightbox=FALSE}
knitr::include_graphics("https://raw.githubusercontent.com/AtlasOfLivingAustralia/ala-labs/main/images/people/shandiya.png")
```
:::
:::

<!------------------------ Post starts here ------------------------>

Visualisations of species distributions can be very simple yet effective ways of conveying biological and ecological information, such as range, habitat, and relative population size. 

Representing more than one species distribution in a single figure can be difficult, though, especially where there are areas of overlap. Points and colour-filled polygons will obscure each other even with a degree of transparency, while densities and shaded regions can only show one species at a time. 

Here, we demonstrate a method to visualise distributions of multiple species with overlapping ranges on the same map, with only a small loss in resolution. The technique is a novel twist on the commonly used [hexbin map](https://r-graph-gallery.com/hexbin-map.html): instead of using a colour fill to represent presence/absence or counts within each hexagon, we use multiple coloured points within each hexagon to represent presence/absence of species, allowing users to get a broad overview of how multiple species are distributed across an area.

This method requires a number of steps to build up the elements of the final figure:

  *  Getting occurrence records for species of interest
  *  Creating a hex grid over the area of occupancy for those species
  *  Assigning locations and colour to each species within each hex

The final figure will comprise a combination of the basemap, hex grid, and species points once these elements are created. 

Let's begin by loading the R packages we'll be using.

```{r}
#| output: FALSE
library(galah)
library(ggtext)
library(ozmaps)
library(sf)
library(showtext)
library(stringr)
library(tidyverse)
```

We'll use the [{galah} package](https://galah.ala.org.au) to download occurrence records from the [Atlas of Living Australia (ALA)](https://www.ala.org.au). To do this, you'll need to [register your email address with the ALA](https://auth.ala.org.au/userdetails/registration/createAccount), then pass it to {galah} using `galah_config()`.

```{r}
#| include: FALSE
galah_config(email = "callumwaite2000@gmail.com")
```

```{r}
#| eval: FALSE
galah_config(email = "your-email@email.com")
```

## Download data

Since our goal here is to map distributions of multiple species, we've chosen honeyeaters from the genus *Melithreptus*: this is a distinctive group of 7 small- to medium-sized, short-billed and square-tailed honeyeaters with overlapping distributions across Australia.

::: {layout-ncol="3" style="margin-left: auto; margin-right: auto;"}
<img src="https://ala-images.s3.ap-southeast-2.amazonaws.com/store/3/a/2/5/323bd0bc-545f-48fa-85aa-eb77dcd052a3/original" class = "rounded"/></img>

<img src="https://ala-images.s3.ap-southeast-2.amazonaws.com/store/b/7/c/a/d96d11b4-4150-48c2-990a-20b70064ac7b/original" class="rounded"/></img>

<img src="https://ala-images.s3.ap-southeast-2.amazonaws.com/store/6/1/5/2/03f17fd7-a256-44c8-a377-011784ef2516/original" class="rounded"/></img>
:::

::: figure-caption
Left: [*Melithreptus gularis* - Black-chinned Honeyeater (Graham Winterflood CC-BY-NC 4.0 (Int))](https://biocache.ala.org.au/occurrences/53209bab-d2c1-4aab-ace7-e2de155389ae), Middle: [*Melithreptus chloropsis* - Gilbert's Honeyeater (Wacrakey CC-BY-NC 4.0 (Int))](https://biocache.ala.org.au/occurrences/a0792deb-18a9-4e59-9419-add4d7b5d0c9), Right: [*Melithreptus validirostris* - Strong-billed Honeyeater (Bird Explorers CC-BY-NC 4.0 (Int))](https://biocache.ala.org.au/occurrences/26edb457-4c80-4073-a6a8-176e68cf431e)
:::

We can get taxonomic information about this group using `atlas_species()`...

```{r}
melithreptus <- galah_call() |>
  galah_identify("Melithreptus") |>
  atlas_species()

melithreptus
```

... and then use this information to download occurrence records for the 7 species. We'll apply a general set of ALA data quality filters to remove low quality records with `galah_apply_profile()`, and pass in the list of species we're interested in with `galah_identify()`. We'll also filter records to 2022[^1], choosing only those with spatial coordinates and that fall within one of the [IBRA bioregions](https://www.dcceew.gov.au/environment/land/nrs/science/ibra) (as a proxy for Australian records only).

[^1]: There are over half a million records from this genus in the ALA, so restricting our download to records from 2022 significantly speeds things up!

```{r}
#| eval: true
#| echo: false
species_occ <- readRDS(here::here("posts", "data", "2023-11-14_hex_point_maps", "species_occ.RDS"))
```

```{r}
#| eval: false
#| echo: true
species_occ <- galah_call() |>
  galah_apply_profile(ALA) |>
  galah_identify(melithreptus$species) |>
  galah_filter(year == 2022,
               !is.na(cl1048),  # IBRA bioregions
               !is.na(decimalLatitude),
               !is.na(decimalLongitude)) |>
  galah_select(decimalLatitude,
               decimalLongitude,
               species, 
               scientificName) |> 
  atlas_occurrences()

head(species_occ)
```

```{r}
#| echo: false
head(species_occ)
```

Since we're going to be performing a few spatial operations to assign species to hexagons, let's convert the `species_occ` dataframe into a simple features (`sf`) object, with latitude and longitude columns represented as points in a geometry column named `occ_geometry`.

```{r}
species_occ_sf <- species_occ |>
  st_as_sf(coords = c("decimalLongitude", "decimalLatitude"), 
           crs = 4326) |> 
  st_set_geometry("occ_geometry")

head(species_occ_sf)
```

## Generate hex grid

Next, we'll set up a grid of hexagons across Australia, which we'll use as bins for plotting summaries of species occurrence. 

`st_make_grid()` can make a grid that covers the bounding box of the supplied shapefile (here the `ozmap_country` shapefile), with  arguments for specifying the size, type, and orientation of polygons in a grid. We'll transform the projection to match the coordinate reference system we set for the species occurrence records above (`4326`), and assign a unique identifier to each hexagon in a column named `hex_id`.

```{r}
hex_grid <- st_make_grid(ozmap_country,
                         cellsize = 2,
                         what = "polygons",
                         square = FALSE,
                         flat_topped = TRUE) |> 
  st_as_sf() |> 
  st_set_geometry("hex_geometry") |> 
  st_transform(4326) |> 
  rowid_to_column(var = "hex_id")
hex_grid
```


Our grid of hexagons looks like this:

```{r}
#| eval: true
#| code-fold: true
ggplot() +
  geom_sf(data = ozmap_states, 
          colour = "darkgrey", 
          fill = NA, 
          linewidth = 0.3) +
  geom_sf(data = hex_grid, 
          fill = NA, 
          col = "deepskyblue4", 
          linewidth = 0.2) +
  theme_void()
```



### Remove empty hexes

You've probably noticed there are a lot of redundant hexagons in the grid we just created. Not every terrestrial hexagon will contain an occurrence record, and we can confidently assume hexagons in the ocean will not contain records of honeyeaters.

We'll remove these empty hexagons with a spatial join (which behaves similarly to `dplyr::left_join()` for spatial objects). This returns a dataframe that has all the information from our original occurrence download, where each row is a record of a species in a particular location, but each record's point location has now been matched to a hexagon from the grid we just created. 

```{r}
hex_with_species <- st_join(x = hex_grid, 
                            y = species_occ_sf,
                            join = st_intersects,
                            left = FALSE)

head(hex_with_species, n = 10)
```

This means any hexagons we initially created in the grid that don't intersect with occurrence records have been removed:

```{r}
#| eval: true
#| code-fold: true
ggplot() +
  geom_sf(data = ozmap_states, 
          colour = "darkgrey", 
          fill = NA, 
          linewidth = 0.3) +
  geom_sf(data = count(hex_with_species, hex_id, hex_geometry), 
          fill = NA, 
          col = "deepskyblue4", 
          linewidth = 0.4) +
  theme_void()
```

### Visualising multiple species in a hexagon

```{r}
#| eval: true
#| echo: false

pal <- c("#88CCEE", "#CC6677", "#DDCC77", "#117733", "#332288", "#AA4499", "#44AA99")

big_hex <- st_polygon(list(rbind(
  c(-1, 0),
  c(-0.5, sqrt(0.75)),
  c(0.5, sqrt(0.75)),
  c(1, 0),
  c(0.5,-sqrt(0.75)),
  c(-0.5,-sqrt(0.75)),
  c(-1, 0))))

small_hex <- st_buffer(big_hex, -0.3)

small_hex_vertices <- small_hex |>
  st_coordinates() |>
  as_tibble() |>
  st_as_sf(coords = c("X", "Y"), remove = FALSE) |> 
  rowid_to_column() |> 
  mutate(vertex_id = if_else(rowid %in% c(2:6), as.character(rowid), "1, 7"))

# 1. original hex
p1 <- ggplot() +
  geom_sf(data = big_hex, fill = NA, linewidth = 1.5, colour = "deepskyblue4") +
  labs(subtitle = "Original\nhex",
       caption = "STEP 1") +
  theme_void() +
  theme(plot.subtitle = element_text(hjust = 0.5),
        plot.caption = element_text(hjust = 0.5))

# 2. smaller hex
p2 <- ggplot() +
  geom_sf(data = big_hex, fill = NA, linewidth = 1.5, colour = "deepskyblue4") +
  geom_sf(data = small_hex, fill = NA, linewidth = 1, colour = "deepskyblue3") +
  labs(subtitle = "Smaller\nhex",
       caption = "STEP 2") +
  theme_void() +
  theme(plot.subtitle = element_text(hjust = 0.5),
        plot.caption = element_text(hjust = 0.5))

# 3. vertices
p3 <- ggplot() +
  geom_sf(data = big_hex, fill = NA, linewidth = 1.5, colour = "deepskyblue4") +
  geom_sf(data = small_hex_vertices, size = 3, colour = "deepskyblue3") +
  labs(subtitle = "Smaller hex\nvertices",
       caption = "STEP 3") +
  theme_void() +
  theme(plot.subtitle = element_text(hjust = 0.5),
        plot.caption = element_text(hjust = 0.5))

# 4. vertex numbers
p4 <- ggplot() +
  geom_sf(data = big_hex, fill = NA, linewidth = 1.5, colour = "deepskyblue4") +
  geom_sf(data = small_hex_vertices, size = 3, colour = "deepskyblue3") +
  geom_text(data = small_hex_vertices, aes(X, Y, label = vertex_id), nudge_y = 0.16) +
  labs(subtitle = "Numbered\nvertices",
       caption = "STEP 4") +
  theme_void() +
  theme(plot.subtitle = element_text(hjust = 0.5),
        plot.caption = element_text(hjust = 0.5))

# 5. with centroid
p5 <- ggplot() +
  geom_sf(data = big_hex, fill = NA, linewidth = 1.5, colour = "deepskyblue4") +
  geom_sf(data = small_hex_vertices, size = 3, colour = "deepskyblue3") +
  geom_sf(data = st_centroid(small_hex), size = 3, colour = "deepskyblue3") +
  geom_text(data = small_hex_vertices[c(1:6),], aes(X, Y, label = rowid), nudge_y = 0.16) +
  geom_sf_text(data = st_centroid(small_hex), aes(label = "7"), nudge_y = 0.16) +
  labs(subtitle = "Numbered vertices\nand centroid",
       caption = "STEP 5") +
  theme_void() +
  theme(plot.subtitle = element_text(hjust = 0.5),
        plot.caption = element_text(hjust = 0.5))

# 6. with colour
p6 <- ggplot() +
  geom_sf(data = big_hex, fill = NA, linewidth = 1.5, colour = "deepskyblue4") +
  geom_sf(data = small_hex_vertices[1:6,], aes(colour = vertex_id), size = 5) +
  geom_sf(data = st_centroid(small_hex), size = 5, colour = "#44AA99") +
  scale_color_manual(values = pal[1:6]) +
  labs(subtitle = "Final\nhexagon",
       caption = "STEP 6") + 
  theme_void() +
  theme(legend.position = "none", 
        plot.subtitle = element_text(hjust = 0.5),
        plot.caption = element_text(hjust = 0.5))
```

As some hexagons will contain occurrence records for more than one species, we need a way to display these overlaps. We'll do this by setting up 7 positions in each hexagon, 1 for each species, and assign each species a position and colour so they can be visually differentiated. 

The figure below summarises the process we'll follow: for each hexagon remaining in the grid, we'll generate a smaller hexagon, then get the coordinates of each vertex and centroid of the smaller hexagon. This gives us 7 positions to display up to 7 species in each hexagon.

:::{layout-align=center}
```{r}
#| eval: true
#| echo: false
#| column: page
#| fig-height: 2
#| fig-width: 10
#| out-extra: "style=margin-left:auto;margin-right:auto;"
#| lightbox: 
#|   group: hex
#|   description: Steps to build a grid of points inside each hexagon
library(patchwork)
p1 + p2 + p3 + p4 + p5 + p6 + plot_layout(ncol = 6)
```
:::

### Set up 7 points

Let's start by extracting the unique identifiers and spatial coordinates for every hexagon containing an occurrence record[^2]. Each `hex_id` refers to one of the remaining hexagons in our grid. This is step 1 from the figure above. 

[^2]: Using `distinct()` produces an identical result to `count()` here, but is far slower because checking for distinct values in the geometry column is computationally intensive. If your dataframe has fewer rows, you could also do this: `hex_with_species |> select(hex_id, hex_geometry) |> distinct()`.

```{r}
unique_hex <- hex_with_species |> 
  count(hex_id, hex_geometry) |> 
  select(-`n`)
unique_hex
```

Next, we'll work through steps 2 - 4. Let's create a smaller hexagon within each original hex using `st_buffer()`, extract the coordinates of its vertices using `st_coordinates()`, and assign an integer to each vertex ranging from 1 to 7[^3]. We've created an anonymous function to pipe these steps together, and used `pmap()` to apply this function iteratively to every hexagon in the grid. 

[^3]: Each hexagon is formed as a closed (rather than open) polygon, whereby the vertices are joined in the following order: 1-2-3-4-5-6-1. So although there are only 6 vertices, we get 7 sets of coordinates, with the first and seventh sets being duplicated to close the polygon.

:::{.callout-note collapse='true'}
We use the `dist` argument in `st_buffer()` to define the size of the smaller hexagon, but this depends on the `cellsize` of the original larger hexagon (in the six-hexagon figure, `cellsize` = 2). Depending on the number of species you'd like to fit within each polygon and the shape of the polygon you've chosen, you may need to try out different values of `cellsize` and `dist` to find combinations that work best for your visualisation.
:::

```{r}
vertex_coords <- unique_hex |> 
  mutate(vertices = pmap(
    .l = list(x = hex_geometry),
    .f = function(x) {
      x |>
        st_buffer(dist = -0.4) |>         # STEP 2: set size of smaller hex
        st_coordinates() |>               # STEP 3: get vertex coordinates of smaller hex        
        as_tibble() |>                    # convert matrix to tibble  
        st_as_sf(coords = c("X", "Y")) |> # convert tibble to simple features
        select(-L1, -L2) |>               # remove unnecessary columns
        mutate(vertex_position = 1:7)     # STEP 4: number vertices 
    })) |> 
  unnest(cols = vertices)

head(vertex_coords, n = 10)
```

In the resulting dataframe, the `hex_id` and `hex_geometry` columns contain the unique ID and geometry of the original large hexagons from the grid. Meanwhile, the remaining columns contain information for our newly created smaller hexagons: the `geometry` column contains the spatial coordinates of each hexagon's respective corner vertex, and `vertex_position` identifies each vertex point. 

We'd like to show information of 7 species in our hexagon, but despite having 7 points in `vertex_position`, the 7th point contains the same information as the 1st point. This is so that, when drawn by lines, the hexagon is closed. However, because we are only interested drawing points, we can mutate the duplicated row of the 7th vertex to hold the coordinates of the centroid of each hexagon instead. This will gives us seven distinct positions (step 5 in our six-hexagon figure).

```{r}
vertex_centroid_coords <- vertex_coords |> 
  mutate(geometry = ifelse(vertex_position == 7,      
                           st_centroid(hex_geometry), 
                           geometry)) |> 
  st_drop_geometry() |>                               
  st_as_sf(crs = 4326)

head(vertex_centroid_coords, n = 10)
```

## Assign species to positions

The `melithreptus` dataframe (created earlier using `atlas_species()`) requires a small amount of tidying to be compatible with the rest of our data. The `species` column contains subgenera, which we can remove with regular expressions (regex)[^4]. We also need to ensure all species have a vernacular name, noting that *Melithreptus chloropsis* is currently lacking one in the ALA database. We can then assign a number (1-7) denoting each species' position in a hexagon[^5].

[^4]: Regular expressions, or regex, are used to match specific patterns in strings. Here, we want to remove the inclusion of subgenera, parentheses, and any extra spaces in species names (e.g. `"Melithreptus (Melithreptus) affinis"` to `"Melithreptus  affinis"`), and we do this using `species = str_replace_all(species, "\\(.*?\\)\\s*", "")`. We're looking for a sequence that starts with an opening parenthesis (`\\(`), is followed by any characters (`.*?`), and ends with a closing parenthesis (`\\)`). Any spaces following the closing parenthesis (`\\s*`) are also matched. Such sequences are replaced with an empty string (`""`), effectively removing them. 

[^5]: Here we assign the positions simply with `vertex_position = c(1:7)`, however you can reorder the dataframe or this position vector to have more control over which point in the hexagon each species is assigned. For instance, you might wish to do this to separate similar colours within the hexagon, or to assign the most widely distributed species to the centre point.

```{r}
species_data <- melithreptus |>
  select(species, vernacular_name) |>
  mutate(species = str_replace_all(species, "\\(.*?\\)\\s*", ""),
         vernacular_name = if_else(species == "Melithreptus chloropsis", 
                                   "Gilbert's Honeyeater",
                                   vernacular_name),
         vertex_position = c(1:7))

species_data
```

Our final step is to bring these three dataframes (`hex_with_species`, `species_data`, `vertex_centroid_coords`) together with `dplyr::left_join()`. 

We begin by joining our distinct hexagon and species combinations (`hex_with_species`) with our species positions and common names (`species_data`) using the `species` column...

```{r}
species_points_a <- hex_with_species |>
  st_drop_geometry() |>
  select(hex_id, species) |>
  distinct() |> 
  left_join(species_data,
            by = join_by(species))

head(species_points_a, n = 10)
```

...and follow this with another join to get the point coordinates of each species' point in each hexagon (`vertex_centroid_coords`), using the `vertex_position` and `hex_id` columns.

```{r}
species_points <- species_points_a |>
  left_join(vertex_centroid_coords,
            by = join_by(vertex_position, hex_id)) |> 
  st_as_sf(crs = 4326)

head(species_points, n = 10)
```

## Map

Let's check how our three spatial layers—basemap, hexagons, and species points—look on a map.

```{r}
ggplot() +
  geom_sf(data = ozmap_states, fill = NA) +
  geom_sf(data = unique_hex, fill = NA) +
  geom_sf(data = species_points, aes(colour = vernacular_name)) +
  lims(x = c(112, 155), y = c(-46, -8)) +
  theme_void()
```

This all looks correct! Now to add some final flourishes to make our map more aesthetically pleasing, as well as more accessible with a colourblind friendly palette by [Paul Tol](https://personal.sron.nl/~pault/).


```{r}
#| echo: true
#| code-fold: true
#| fig-height: 7
#| fig-width: 10
#| column: page
#| fig-align: center
#| out-extra: "style=margin-left:auto;margin-right:auto;"
#| lightbox: 
#|   group: final-plot
#|   description: Distribution of Honeyeater species

font_add_google("Montserrat")
showtext_auto(enable = TRUE)

tol_muted <- c("#88CCEE", "#CC6677", "#DDCC77", "#117733", "#332288", "#AA4499", "#44AA99")

ggplot() +
  geom_sf(data = ozmap_states, 
          fill = NA, colour = "#ababab", linewidth = 0.3) +
  geom_sf(data = unique_hex, 
          fill = "#efefef55", colour = "#777777", linewidth = 0.5) +
  geom_sf(data = species_points, aes(colour = vernacular_name), 
          size = 2.3) +
  scale_colour_manual(
    values = tol_muted,
    guide = guide_legend(title = "*Melithreptus* &#0020; species",
                         override.aes = list(size = 4))
  ) +
  lims(x = c(112, 155), y = c(-46, -8)) +
  theme_void() +
  theme(legend.title = element_markdown(family = "Montserrat", size = 24),
        legend.text = element_text(family = "Montserrat", size = 20),
        legend.spacing.x = unit(0, "in"))
```


## Final Thoughts

This visualisation is a novel way to show range overlaps and distributions of multiple species at once. A key strength is the consistency of the repeatable hex unit—the fixed positions and colours of the species points make it easy to follow patterns within or between species.

This is also a very flexible method. It's easy to customise: 

  1. the size, shape (hexagons vs squares) and orientation of the polygons
  2. the colours and orientations of points within the hexagons, and 
  3. the spatial scale of the base map 

Consider also that you do not necessarily need to use exactly seven different species/taxa—with a bit of creativity, it is possible to fit any number of points from 2-9 into a hexagon (2-7) or square symmetrically...

```{r}
#| echo: FALSE
#| fig-height: 1
big_hex <- st_polygon(list(rbind(
  c(-1, 0),
  c(-0.5, sqrt(0.75)),
  c(0.5, sqrt(0.75)),
  c(1, 0),
  c(0.5,-sqrt(0.75)),
  c(-0.5,-sqrt(0.75)),
  c(-1, 0))))

small_hex <- st_buffer(big_hex, -0.4)

small_hex_vertices <- small_hex |>
  st_coordinates() |>
  as_tibble() |>
  rowid_to_column() |>
  mutate(X = ifelse(rowid == 7, 0, X)) |>
  st_as_sf(coords = c("X", "Y"), remove = FALSE) |> 
  select(rowid)

# 3. vertices
h2 <- ggplot() +
  geom_sf(data = big_hex, fill = NA, linewidth = 1.5, colour = "deepskyblue4") +
  geom_sf(data = small_hex_vertices[c(2,5),], size = 5, colour = "deepskyblue3") +
  theme_void()

h3 <- ggplot() +
  geom_sf(data = big_hex, fill = NA, linewidth = 1.5, colour = "deepskyblue4") +
  geom_sf(data = small_hex_vertices[c(2,4,6),], size = 5, colour = "deepskyblue3") +
  theme_void()

h4 <- ggplot() +
  geom_sf(data = big_hex, fill = NA, linewidth = 1.5, colour = "deepskyblue4") +
  geom_sf(data = small_hex_vertices[c(2,4,6,7),], size = 5, colour = "deepskyblue3") +
  theme_void()

h5 <- ggplot() +
  geom_sf(data = big_hex, fill = NA, linewidth = 1.5, colour = "deepskyblue4") +
  geom_sf(data = small_hex_vertices[c(2,3,5,6,7),], size = 5, colour = "deepskyblue3") +
  theme_void()

h6 <- ggplot() +
  geom_sf(data = big_hex, fill = NA, linewidth = 1.5, colour = "deepskyblue4") +
  geom_sf(data = small_hex_vertices[1:6,], size = 5, colour = "deepskyblue3") +
  theme_void()

h7 <- ggplot() +
  geom_sf(data = big_hex, fill = NA, linewidth = 1.5, colour = "deepskyblue4") +
  geom_sf(data = small_hex_vertices, size = 5, colour = "deepskyblue3") +
  theme_void()

(h2 + h3 + h4 + h5 + h6 + h7) + plot_layout(ncol = 6)
```

<details>

<summary style="color: #E06E53;">

Expand for session info

</summary>

```{r, echo = FALSE}
library(sessioninfo)
# save the session info as an object
pkg_sesh <- session_info(pkgs = "attached")
# print it out
pkg_sesh
```

</details>
